1. 계정 및 테이블 생성
-- 1. 계정 생성
-- create user <계정이름> identified by <계정암호> default tablespace users;
create user react identified by tiger default tablespace users;

-- 비밀번호 변경
-- alter user <계쩡이름> identified by <변경 비밀번호>

-- 2. 사용자 권한 부여
-- grant connect, resource, create view to <계정이름>
grant connect, resource, create view to react;
-- view 생성권한 따로 부여할 경우
grant create view to react;

-- 3. 락해제
-- alter user <계정> account unlock;
alter user react account unlock;

drop table board_tbl;
create table board_tbl(
    board_no        NUMBER,
    board_title     VARCHAR2(50),
    board_content   VARCHAR2(150),
    board_email     VARCHAR2(100),
    board_regdate   DATE DEFAULT sysdate,
    board_pwd       VARCHAR2(20)
);

drop sequence board_seq;
create sequence board_seq
start with 1
INCREMENT by 1;

insert into board_tbl(board_no,board_title, board_content, board_email, board_regdate, board_pwd)
VALUES(board_seq.nextval, 'react_title1', 'react content1', 'react1@naver.com', sysdate, '1234');
commit;
insert into board_tbl(board_no,board_title, board_content, board_email, board_regdate, board_pwd)
VALUES(board_seq.nextval, 'react_title2', 'react content2', 'react2@naver.com', sysdate, '1234');
insert into board_tbl(board_no,board_title, board_content, board_email, board_regdate, board_pwd)
VALUES(board_seq.nextval, 'react_title3', 'react content3', 'react3@naver.com', sysdate, '1234');
insert into board_tbl(board_no,board_title, board_content, board_email, board_regdate, board_pwd)
VALUES(board_seq.nextval, 'react_title4', 'react content4', 'react4@naver.com', sysdate, '1234');
insert into board_tbl(board_no,board_title, board_content, board_email, board_regdate, board_pwd)
VALUES(board_seq.nextval, 'react_title5', 'react content5', 'react5@naver.com', sysdate, '1234');
commit;

select * from board_tbl
 order by board_no desc;

2. src > css 폴더 생성 > App.css, index.css 잘라서 가져온다.
                        default.css, Header.css 는 작성한다.

3.   src > components 폴더 생성 > 
   MainList.js 생성, 작성
   App.js 작성
   WriteForm.js 작성
f
// 기본 속성 설정 => 두개 포트번호가 반드시 일치해야 함
// package.json에 추가 => "proxy":"http://localhost:5000",
app.set('port', process.env.PORT || 5000);  // PORT || 포트번호 => 포트 중복안되게

[ @material-ui/core 설치 ]
[ react-router-dom 설치 ]
[   설치 ]

4. 오라클 연결
src > oracle 폴더 생성 >
 - dbConfig.js 생성 및 작성 => dbConnection 정보 : 계정, 패스워드, ip/xe
 - db.js 생성 및 작성
   dbConnection

    select => /api/boardList



   insert / update / delete / select

   //=====================================================================
   

   [ MainList.js] 추가

    componentDidMount() {
        this.callApi()                        
            .then(res => this.setState({board: res}))    // arrow function : 화살표 함수 : 변수를 전달하면서 기능구현
            .catch(err => console.log(err));
    }

    callApi = async () => {
        const response = await fetch('/api/boardList');  // await fetch('url')로 json 형식으로 가져온 리스트(boardList)를 받아와서 response에 담는다.
        const body = await response.json();
        return body;
    }
   
    {/* setState()애 의해 board값이 select한 결과로 변경 후,  BoardList에 porps 형태로 board_tbl 테이블의 게시판 정보 데이터 전달 */}
    {/*  값들은 반드시 대문자 컬럼 */}
    {this.state.board ? this.state.board.map((b, index) => {
        return <BoardList key={index} board_no={b.BOARD_NO} board_title={b.BOARD_TITLE}
                    board_content={b.BOARD_CONTENT} board_email={b.BOARD_EMAIL} board_regdate={b.BOARD_REGDATE} />
    }) : ''
    }
  
   //=====================================================================
    [ package.json ] "proxy":"http://localhost:5000", 추가
    => Proxy error: Could not proxy request /api/boardList from localhost:3000 to http://localhost:5000/.
    See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (ECONNREFUSED).
   //=====================================================================

   [ oracledb 설치 ]
   npm install oracledb


   [ nodemon 설치 ]
   npm install nodemon -g => oracle db 정보가 수정되면 바로 수정내역이 반영

   ==> - nodemon db.js (cmd 실행 => db.js 소스폴더 C:\Dev76\workspace_react\board\src\oracle 디텍터리에서 실행)
       - yarn start : 클라이언트

   [ express 설치 ]
   npm install express

   [ body-parser 설치 ]
   npm install body-parser

   ==================================================================================
   [글목록]
   App.js -> MainList.js -> Header.js + BoardList.js

   [글작성]
   WriteForm.js
   db.js 추가

   작동순서 : Header.js -> WriteForm.js -> db.js

   [글수정]

   BoardList.js : 목록 데이터 (수정버튼 + 삭제버튼) + 수정화면 + 삭제화면
   db.js 추가
   주의사항 수정시 key 비교를 위해 boardList.js 에서 board_no hidden으로 추가
